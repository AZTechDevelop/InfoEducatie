{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";function RoataMonocromaticaVariata(){const[selectedSegment,setSelectedSegment]=useState(null);const segments=4;const subSegments=3;const colors=[//Regula e deschis, mediu, inchis\n// Nuanțe de roșu\n'hsl(0, 90%, 60%)','hsl(0, 90%, 50%)','hsl(0, 90%, 40%)',// Nuanțe de albastru\n'hsl(240, 90%, 60%)','hsl(240, 90%, 50%)','hsl(240, 90%, 40%)',// Nuanțe de verde\n'hsl(120, 60%, 60%)','hsl(120, 60%, 50%)','hsl(120, 60%, 40%)',// Nuanțe de mov\n'hsl(300, 60%, 70%)','hsl(300, 60%, 60%)','hsl(300, 60%, 50%)'];useEffect(()=>{// Selectam un segment aleatoriu\nsetSelectedSegment(Math.floor(Math.random()*segments));},[]);const getCoordinatesForPercent=percent=>{const x=Math.cos(2*Math.PI*percent);const y=Math.sin(2*Math.PI*percent);return[x,y];};const getPathData=(index,subIndex)=>{const totalSubSegments=segments*subSegments;const startPercent=(index*subSegments+subIndex)/totalSubSegments;const endPercent=(index*subSegments+subIndex+1)/totalSubSegments;const[startX,startY]=getCoordinatesForPercent(startPercent);const[endX,endY]=getCoordinatesForPercent(endPercent);return\"M 0 0 L \".concat(startX*16,\" \").concat(startY*16,\" A 16 16 0 0 1 \").concat(endX*16,\" \").concat(endY*16,\" z\");};const adjustColor=(color,index)=>{if(selectedSegment===index){return color;}else{return'grey';}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"svg\",{viewBox:\"-18 -18 36 36\",width:\"200px\",height:\"200px\",children:Array.from({length:segments}).map((_,index)=>Array.from({length:subSegments}).map((_,subIndex)=>/*#__PURE__*/_jsx(\"path\",{d:getPathData(index,subIndex),fill:adjustColor(colors[index*subSegments+subIndex],index),onClick:()=>setSelectedSegment(index),style:{cursor:'pointer'}},\"\".concat(index,\"-\").concat(subIndex))))})});}export default RoataMonocromaticaVariata;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","RoataMonocromaticaVariata","selectedSegment","setSelectedSegment","segments","subSegments","colors","Math","floor","random","getCoordinatesForPercent","percent","x","cos","PI","y","sin","getPathData","index","subIndex","totalSubSegments","startPercent","endPercent","startX","startY","endX","endY","concat","adjustColor","color","children","viewBox","width","height","Array","from","length","map","_","d","fill","onClick","style","cursor"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataMonocromatica.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction RoataMonocromaticaVariata() {\r\n    const [selectedSegment, setSelectedSegment] = useState(null);\r\n    const segments = 4;  \r\n    const subSegments = 3;  \r\n    const colors = [\r\n        //Regula e deschis, mediu, inchis\r\n        // Nuanțe de roșu\r\n        'hsl(0, 90%, 60%)',  \r\n        'hsl(0, 90%, 50%)',  \r\n        'hsl(0, 90%, 40%)',  \r\n    \r\n        // Nuanțe de albastru\r\n        'hsl(240, 90%, 60%)',  \r\n        'hsl(240, 90%, 50%)',  \r\n        'hsl(240, 90%, 40%)',  \r\n    \r\n        // Nuanțe de verde\r\n        'hsl(120, 60%, 60%)',  \r\n        'hsl(120, 60%, 50%)',  \r\n        'hsl(120, 60%, 40%)',  \r\n    \r\n        // Nuanțe de mov\r\n        'hsl(300, 60%, 70%)',  \r\n        'hsl(300, 60%, 60%)',  \r\n        'hsl(300, 60%, 50%)'  \r\n    ];\r\n    \r\n    useEffect(() => {\r\n        // Selectam un segment aleatoriu\r\n        setSelectedSegment(Math.floor(Math.random() * segments));\r\n    }, []);\r\n\r\n    const getCoordinatesForPercent = (percent) => {\r\n        const x = Math.cos(2 * Math.PI * percent);\r\n        const y = Math.sin(2 * Math.PI * percent);\r\n        return [x, y];\r\n    };\r\n\r\n    const getPathData = (index, subIndex) => {\r\n        const totalSubSegments = segments * subSegments;\r\n        const startPercent = (index * subSegments + subIndex) / totalSubSegments;\r\n        const endPercent = (index * subSegments + subIndex + 1) / totalSubSegments;\r\n        const [startX, startY] = getCoordinatesForPercent(startPercent);\r\n        const [endX, endY] = getCoordinatesForPercent(endPercent);\r\n\r\n        return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\r\n    };\r\n\r\n    const adjustColor = (color, index) => {\r\n        if (selectedSegment === index) {\r\n            \r\n            return color;\r\n        } else {\r\n           \r\n            return 'grey';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n          \r\n            <svg viewBox=\"-18 -18 36 36\" width=\"200px\" height=\"200px\">\r\n                {Array.from({ length: segments }).map((_, index) => (\r\n                    Array.from({ length: subSegments }).map((_, subIndex) => (\r\n                        <path\r\n                            key={`${index}-${subIndex}`}\r\n                            d={getPathData(index, subIndex)}\r\n                            fill={adjustColor(colors[index * subSegments + subIndex], index)}\r\n                            onClick={() => setSelectedSegment(index)}\r\n                            style={{ cursor: 'pointer' }}\r\n                        />\r\n                    ))\r\n                ))}\r\n            </svg>\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataMonocromaticaVariata;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}