{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Acasa\\\\img2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorWheel = () => {\n  _s();\n  const [hoverColor, setHoverColor] = useState('');\n  const colors = [\"rgb(255,0,0)\", \"rgb(255,64,0)\", \"rgb(255,128,0)\", \"rgb(255,192,0)\", \"rgb(255,255,0)\", \"rgb(192,255,0)\", \"rgb(128,255,0)\", \"rgb(64,255,0)\", \"rgb(0,255,0)\", \"rgb(0,255,64)\", \"rgb(0,255,128)\", \"rgb(0,255,192)\", \"rgb(0,255,255)\", \"rgb(0,192,255)\", \"rgb(0,128,255)\", \"rgb(0,64,255)\", \"rgb(0,0,255)\", \"rgb(64,0,255)\", \"rgb(128,0,255)\", \"rgb(192,0,255)\"];\n  const radius = 150;\n  const strokeWidth = 30;\n  const gap = 0.02; // Gap between slices\n\n  const calculatePath = (index, total) => {\n    const anglePerSlice = 2 * Math.PI / total;\n    const startAngle = index * anglePerSlice + gap;\n    const endAngle = startAngle + anglePerSlice - gap * 2;\n    const largeArc = (endAngle - startAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;\n    const startX = radius + radius * Math.cos(startAngle) * 40;\n    const startY = radius + radius * Math.sin(startAngle);\n    const endX = radius + radius * Math.cos(endAngle);\n    const endY = radius + radius * Math.sin(endAngle);\n    return [`M ${radius} ${radius}`, `L ${startX} ${startY}`, `A ${radius} ${radius} 0 ${largeArc} 1 ${endX} ${endY}`, `Z`].join(' ');\n  };\n  const handleMouseEnter = color => {\n    setHoverColor(`RGB: ${color}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: radius * 2,\n      height: radius * 2,\n      viewBox: `0 0 ${radius * 2} ${radius * 2}`,\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: calculatePath(index, colors.length),\n        fill: color,\n        stroke: \"white\" // White gaps between slices\n        ,\n        strokeWidth: \"1\",\n        onMouseEnter: () => handleMouseEnter(color),\n        onMouseLeave: () => setHoverColor('')\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 text-lg\",\n      children: hoverColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorWheel, \"bjgx3qcuM/I+bpgnNFboBKwIH+E=\");\n_c = ColorWheel;\nexport default ColorWheel;\nvar _c;\n$RefreshReg$(_c, \"ColorWheel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ColorWheel","_s","hoverColor","setHoverColor","colors","radius","strokeWidth","gap","calculatePath","index","total","anglePerSlice","Math","PI","startAngle","endAngle","largeArc","startX","cos","startY","sin","endX","endY","join","handleMouseEnter","color","className","children","width","height","viewBox","map","d","length","fill","stroke","onMouseEnter","onMouseLeave","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Acasa/img2.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ColorWheel = () => {\r\n  const [hoverColor, setHoverColor] = useState('');\r\n  const colors = [\r\n    \"rgb(255,0,0)\", \"rgb(255,64,0)\", \"rgb(255,128,0)\", \"rgb(255,192,0)\", \"rgb(255,255,0)\",\r\n    \"rgb(192,255,0)\", \"rgb(128,255,0)\", \"rgb(64,255,0)\", \"rgb(0,255,0)\", \"rgb(0,255,64)\",\r\n    \"rgb(0,255,128)\", \"rgb(0,255,192)\", \"rgb(0,255,255)\", \"rgb(0,192,255)\", \"rgb(0,128,255)\",\r\n    \"rgb(0,64,255)\", \"rgb(0,0,255)\", \"rgb(64,0,255)\", \"rgb(128,0,255)\", \"rgb(192,0,255)\"\r\n  ];\r\n\r\n  const radius = 150;\r\n  const strokeWidth = 30;\r\n  const gap = 0.02; // Gap between slices\r\n\r\n  const calculatePath = (index, total) => {\r\n    const anglePerSlice = 2 * Math.PI / total;\r\n    const startAngle = index * anglePerSlice + gap;\r\n    const endAngle = startAngle + anglePerSlice - gap * 2;\r\n    const largeArc = (endAngle - startAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;\r\n\r\n    const startX = radius + radius * Math.cos(startAngle) *40;\r\n    const startY = radius + radius * Math.sin(startAngle);\r\n    const endX = radius + radius * Math.cos(endAngle);\r\n    const endY = radius + radius * Math.sin(endAngle);\r\n\r\n    return [\r\n      `M ${radius} ${radius}`,\r\n      `L ${startX} ${startY}`,\r\n      `A ${radius} ${radius} 0 ${largeArc} 1 ${endX} ${endY}`,\r\n      `Z`\r\n    ].join(' ');\r\n  };\r\n\r\n  const handleMouseEnter = (color) => {\r\n    setHoverColor(`RGB: ${color}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center p-4\">\r\n      <svg width={radius * 2} height={radius * 2} viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n        {colors.map((color, index) => (\r\n          <path\r\n            key={index}\r\n            d={calculatePath(index, colors.length)}\r\n            fill={color}\r\n            stroke=\"white\" // White gaps between slices\r\n            strokeWidth=\"1\"\r\n            onMouseEnter={() => handleMouseEnter(color)}\r\n            onMouseLeave={() => setHoverColor('')}\r\n          />\r\n        ))}\r\n      </svg>\r\n      <div className=\"mt-2 text-lg\">\r\n        {hoverColor}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorWheel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}