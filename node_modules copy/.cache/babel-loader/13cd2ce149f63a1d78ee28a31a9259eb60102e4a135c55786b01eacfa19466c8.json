{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Teorie\\\\componente\\\\RoataMonocromatica.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoataMonocromaticaVariata() {\n  _s();\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const segments = 12;\n  const colors = ['#FF6347', '#FF4500', '#FFD700', '#808000', '#008000', '#008080', '#00FFFF', '#0000FF', '#800080', '#FF00FF', '#800000', '#000080'];\n  useEffect(() => {\n    // Setează un segment aleatoriu la încărcarea componentei\n    setSelectedSegment(Math.floor(Math.random() * segments));\n\n    // Schimbă segmentul aleatoriu la fiecare 3 secunde\n    const interval = setInterval(() => {\n      setSelectedSegment(prevSegment => (prevSegment + 1) % segments);\n    }, 3000);\n\n    // Curăță intervalul la demontarea componentei\n    return () => clearInterval(interval);\n  }, [segments]);\n\n  // Funcție care calculează punctele pentru fiecare segment\n  const getCoordinatesForPercent = percent => {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x, y];\n  };\n\n  // Funcție pentru generarea path-ului fiecărui segment\n  const getPathData = (index, lightnessFactor) => {\n    const startPercent = (index + lightnessFactor * 0.33) / segments;\n    const endPercent = (index + lightnessFactor * 0.33 + 0.33) / segments;\n    const [startX, startY] = getCoordinatesForPercent(startPercent);\n    const [endX, endY] = getCoordinatesForPercent(endPercent);\n    return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold my-4\",\n      children: \"Roata Monocromatic\\u0103 Variat\\u0103\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"-18 -18 36 36\",\n      width: \"300px\",\n      height: \"300px\",\n      children: colors.map((color, index) => [0, 1, 2].map(lightnessFactor => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: getPathData(index, lightnessFactor),\n        fill: `hsl(${color.match(/\\d+/g).reduce((a, b) => a + parseInt(b), 0) % 360},100%,${50 + lightnessFactor * 15}%)`,\n        style: {\n          cursor: 'pointer',\n          opacity: selectedSegment === index ? 1 : 0.3\n        }\n      }, `${index}-${lightnessFactor}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Un segment este selectat aleatoriu \\u0219i schimbat automat la fiecare 3 secunde.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(RoataMonocromaticaVariata, \"TP0ZmG4VdFS0Tplfvh2/vw9KbQU=\");\n_c = RoataMonocromaticaVariata;\nexport default RoataMonocromaticaVariata;\nvar _c;\n$RefreshReg$(_c, \"RoataMonocromaticaVariata\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RoataMonocromaticaVariata","_s","selectedSegment","setSelectedSegment","segments","colors","Math","floor","random","interval","setInterval","prevSegment","clearInterval","getCoordinatesForPercent","percent","x","cos","PI","y","sin","getPathData","index","lightnessFactor","startPercent","endPercent","startX","startY","endX","endY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","width","height","map","color","d","fill","match","reduce","a","b","parseInt","style","cursor","opacity","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataMonocromatica.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction RoataMonocromaticaVariata() {\r\n    const [selectedSegment, setSelectedSegment] = useState(null);\r\n    const segments = 12;\r\n    const colors = [\r\n        '#FF6347', '#FF4500', '#FFD700', '#808000',\r\n        '#008000', '#008080', '#00FFFF', '#0000FF',\r\n        '#800080', '#FF00FF', '#800000', '#000080'\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // Setează un segment aleatoriu la încărcarea componentei\r\n        setSelectedSegment(Math.floor(Math.random() * segments));\r\n\r\n        // Schimbă segmentul aleatoriu la fiecare 3 secunde\r\n        const interval = setInterval(() => {\r\n            setSelectedSegment(prevSegment => (prevSegment + 1) % segments);\r\n        }, 3000);\r\n\r\n        // Curăță intervalul la demontarea componentei\r\n        return () => clearInterval(interval);\r\n    }, [segments]);\r\n\r\n    // Funcție care calculează punctele pentru fiecare segment\r\n    const getCoordinatesForPercent = (percent) => {\r\n        const x = Math.cos(2 * Math.PI * percent);\r\n        const y = Math.sin(2 * Math.PI * percent);\r\n        return [x, y];\r\n    };\r\n\r\n    // Funcție pentru generarea path-ului fiecărui segment\r\n    const getPathData = (index, lightnessFactor) => {\r\n        const startPercent = (index + lightnessFactor * 0.33) / segments;\r\n        const endPercent = (index + lightnessFactor * 0.33 + 0.33) / segments;\r\n        const [startX, startY] = getCoordinatesForPercent(startPercent);\r\n        const [endX, endY] = getCoordinatesForPercent(endPercent);\r\n\r\n        return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold my-4\">Roata Monocromatică Variată</h1>\r\n            <svg viewBox=\"-18 -18 36 36\" width=\"300px\" height=\"300px\">\r\n                {colors.map((color, index) => (\r\n                    [0, 1, 2].map(lightnessFactor => (\r\n                        <path\r\n                            key={`${index}-${lightnessFactor}`}\r\n                            d={getPathData(index, lightnessFactor)}\r\n                            fill={`hsl(${(color.match(/\\d+/g).reduce((a, b) => a + parseInt(b), 0) % 360)},100%,${50 + lightnessFactor * 15}%)`}\r\n                            style={{ cursor: 'pointer', opacity: selectedSegment === index ? 1 : 0.3 }}\r\n                        />\r\n                    ))\r\n                ))}\r\n            </svg>\r\n            <p className=\"mt-4\">Un segment este selectat aleatoriu și schimbat automat la fiecare 3 secunde.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataMonocromaticaVariata;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}