{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Teorie\\\\componente\\\\RoataComplementara.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoataCulorilorComplementare() {\n  _s();\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const colors = ['hsl(0, 80%, 50%)',\n  // Rosu\n  'hsl(240, 80%, 50%)',\n  // Albastru\n  'hsl(60, 80%, 50%)',\n  // Galben\n  'hsl(180, 80%, 50%)',\n  // Turcoaz\n\n  'hsl(120, 80%, 50%)',\n  // Verde (complementara rosului)\n  'hsl(30, 80%, 50%)',\n  // Portocaliu (complementara albastrului)\n  'hsl(270, 80%, 50%)',\n  // Violet (complementara galbenului)\n\n  'hsl(330, 80%, 50%)' // Roșu-violet (complementara turcoazului)\n  ];\n  const getCoordinatesForPercent = percent => {\n    const x = Math.cos(3 * Math.PI * percent);\n    const y = Math.sin(3 * Math.PI * percent);\n    return [x, y];\n  };\n  const getPathData = (index, segments) => {\n    const startPercent = index / segments;\n    const endPercent = (index + 1) / segments;\n    const [startX, startY] = getCoordinatesForPercent(startPercent);\n    const [endX, endY] = getCoordinatesForPercent(endPercent);\n    return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\n  };\n  const adjustColor = index => {\n    if (selectedSegment !== null) {\n      const complementIndex = (selectedSegment + 4) % 8;\n      if (index === selectedSegment || index === complementIndex) {\n        return colors[index];\n      }\n      return 'grey';\n    }\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"-18 -18 36 36\",\n      width: \"200px\",\n      height: \"200px\",\n      children: colors.map((_, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: getPathData(index, 8),\n        fill: adjustColor(index),\n        onClick: () => setSelectedSegment(index),\n        style: {\n          cursor: 'pointer'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(RoataCulorilorComplementare, \"OPQIMN4cnigIIHZL06aYaW9XC7A=\");\n_c = RoataCulorilorComplementare;\nexport default RoataCulorilorComplementare;\nvar _c;\n$RefreshReg$(_c, \"RoataCulorilorComplementare\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RoataCulorilorComplementare","_s","selectedSegment","setSelectedSegment","colors","getCoordinatesForPercent","percent","x","Math","cos","PI","y","sin","getPathData","index","segments","startPercent","endPercent","startX","startY","endX","endY","adjustColor","complementIndex","className","children","viewBox","width","height","map","_","d","fill","onClick","style","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataComplementara.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction RoataCulorilorComplementare() {\r\n    const [selectedSegment, setSelectedSegment] = useState(null);\r\n\r\n    const colors = [\r\n        'hsl(0, 80%, 50%)',    // Rosu\r\n        'hsl(240, 80%, 50%)',  // Albastru\r\n        'hsl(60, 80%, 50%)',   // Galben\r\n        'hsl(180, 80%, 50%)',  // Turcoaz\r\n\r\n        'hsl(120, 80%, 50%)',  // Verde (complementara rosului)\r\n        'hsl(30, 80%, 50%)',   // Portocaliu (complementara albastrului)\r\n        'hsl(270, 80%, 50%)',  // Violet (complementara galbenului)\r\n     \r\n        'hsl(330, 80%, 50%)'   // Roșu-violet (complementara turcoazului)\r\n    ];\r\n\r\n    const getCoordinatesForPercent = (percent) => {\r\n        const x = Math.cos(3 * Math.PI * percent);\r\n        const y = Math.sin(3 * Math.PI * percent);\r\n        return [x, y];\r\n    };\r\n\r\n    const getPathData = (index, segments) => {\r\n        const startPercent = index / segments;\r\n        const endPercent = (index + 1) / segments;\r\n        const [startX, startY] = getCoordinatesForPercent(startPercent);\r\n        const [endX, endY] = getCoordinatesForPercent(endPercent);\r\n\r\n        return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\r\n    };\r\n\r\n    const adjustColor = (index) => {\r\n        if (selectedSegment !== null) {\r\n          \r\n            const complementIndex = (selectedSegment + 4) % 8; \r\n            if (index === selectedSegment || index === complementIndex) {\r\n                return colors[index];\r\n            }\r\n            return 'grey';\r\n        }\r\n        return colors[index];\r\n    };\r\n    \r\n    return (\r\n        <div className=\"text-center\">\r\n           \r\n            <svg viewBox=\"-18 -18 36 36\" width=\"200px\" height=\"200px\">\r\n                {colors.map((_, index) => (\r\n                    <path\r\n                        key={index}\r\n                        d={getPathData(index, 8)}\r\n                        fill={adjustColor(index)}\r\n                        onClick={() => setSelectedSegment((index))}\r\n                        style={{ cursor: 'pointer' }}\r\n                    />\r\n                ))}\r\n            </svg>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataCulorilorComplementare;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,2BAA2BA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMO,MAAM,GAAG,CACX,kBAAkB;EAAK;EACvB,oBAAoB;EAAG;EACvB,mBAAmB;EAAI;EACvB,oBAAoB;EAAG;;EAEvB,oBAAoB;EAAG;EACvB,mBAAmB;EAAI;EACvB,oBAAoB;EAAG;;EAEvB,oBAAoB,CAAG;EAAA,CAC1B;EAED,MAAMC,wBAAwB,GAAIC,OAAO,IAAK;IAC1C,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAGJ,OAAO,CAAC;IACzC,MAAMK,CAAC,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACE,EAAE,GAAGJ,OAAO,CAAC;IACzC,OAAO,CAACC,CAAC,EAAEI,CAAC,CAAC;EACjB,CAAC;EAED,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACrC,MAAMC,YAAY,GAAGF,KAAK,GAAGC,QAAQ;IACrC,MAAME,UAAU,GAAG,CAACH,KAAK,GAAG,CAAC,IAAIC,QAAQ;IACzC,MAAM,CAACG,MAAM,EAAEC,MAAM,CAAC,GAAGd,wBAAwB,CAACW,YAAY,CAAC;IAC/D,MAAM,CAACI,IAAI,EAAEC,IAAI,CAAC,GAAGhB,wBAAwB,CAACY,UAAU,CAAC;IAEzD,OAAQ,WAAUC,MAAM,GAAG,EAAG,IAAGC,MAAM,GAAG,EAAG,kBAAiBC,IAAI,GAAG,EAAG,IAAGC,IAAI,GAAG,EAAG,IAAG;EAC5F,CAAC;EAED,MAAMC,WAAW,GAAIR,KAAK,IAAK;IAC3B,IAAIZ,eAAe,KAAK,IAAI,EAAE;MAE1B,MAAMqB,eAAe,GAAG,CAACrB,eAAe,GAAG,CAAC,IAAI,CAAC;MACjD,IAAIY,KAAK,KAAKZ,eAAe,IAAIY,KAAK,KAAKS,eAAe,EAAE;QACxD,OAAOnB,MAAM,CAACU,KAAK,CAAC;MACxB;MACA,OAAO,MAAM;IACjB;IACA,OAAOV,MAAM,CAACU,KAAK,CAAC;EACxB,CAAC;EAED,oBACIf,OAAA;IAAKyB,SAAS,EAAC,aAAa;IAAAC,QAAA,eAExB1B,OAAA;MAAK2B,OAAO,EAAC,eAAe;MAACC,KAAK,EAAC,OAAO;MAACC,MAAM,EAAC,OAAO;MAAAH,QAAA,EACpDrB,MAAM,CAACyB,GAAG,CAAC,CAACC,CAAC,EAAEhB,KAAK,kBACjBf,OAAA;QAEIgC,CAAC,EAAElB,WAAW,CAACC,KAAK,EAAE,CAAC,CAAE;QACzBkB,IAAI,EAAEV,WAAW,CAACR,KAAK,CAAE;QACzBmB,OAAO,EAAEA,CAAA,KAAM9B,kBAAkB,CAAEW,KAAM,CAAE;QAC3CoB,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAU;MAAE,GAJxBrB,KAAK;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEd;AAACtC,EAAA,CA5DQD,2BAA2B;AAAAwC,EAAA,GAA3BxC,2BAA2B;AA8DpC,eAAeA,2BAA2B;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}