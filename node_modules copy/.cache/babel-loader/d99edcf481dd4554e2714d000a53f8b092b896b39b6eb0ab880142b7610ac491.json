{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Teorie\\\\componente\\\\RoataMonocromatica.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoataMonocromaticaVariata() {\n  _s();\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const colors = ['#E63946', '#F4A261', '#E9C46A', '#2A9D8F', '#264653', '#2B2D42', '#8D99AE', '#EDF2F4', '#EF233C', '#D90429', '#06D6A0', '#118AB2'];\n  const segments = colors.length; // Ajustăm numărul de segmente la numărul de culori disponibile\n\n  useEffect(() => {\n    // Alege un segment aleatoriu la încărcarea componentei\n    const randomSegment = Math.floor(Math.random() * segments);\n    setSelectedSegment(randomSegment);\n  }, [segments]);\n  const getCoordinatesForPercent = percent => {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x, y];\n  };\n  const getPathData = (index, segments) => {\n    const startPercent = index / segments;\n    const endPercent = (index + 1) / segments;\n    const [startX, startY] = getCoordinatesForPercent(startPercent);\n    const [endX, endY] = getCoordinatesForPercent(endPercent);\n    return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold my-4\",\n      children: \"Roata Monocromatic\\u0103 Variat\\u0103\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"-18 -18 36 36\",\n      width: \"300px\",\n      height: \"300px\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: getPathData(index, segments),\n        fill: selectedSegment === index ? color : 'grey',\n        onClick: () => setSelectedSegment(index),\n        style: {\n          cursor: 'pointer',\n          opacity: selectedSegment === index ? 1 : 0.3\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Selecta\\u021Bi un segment pentru a eviden\\u021Bia culoarea, iar restul segmentelor vor deveni gri.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(RoataMonocromaticaVariata, \"TP0ZmG4VdFS0Tplfvh2/vw9KbQU=\");\n_c = RoataMonocromaticaVariata;\nexport default RoataMonocromaticaVariata;\nvar _c;\n$RefreshReg$(_c, \"RoataMonocromaticaVariata\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RoataMonocromaticaVariata","_s","selectedSegment","setSelectedSegment","colors","segments","length","randomSegment","Math","floor","random","getCoordinatesForPercent","percent","x","cos","PI","y","sin","getPathData","index","startPercent","endPercent","startX","startY","endX","endY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","width","height","map","color","d","fill","onClick","style","cursor","opacity","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataMonocromatica.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction RoataMonocromaticaVariata() {\r\n    const [selectedSegment, setSelectedSegment] = useState(null);\r\n    const colors = [\r\n        '#E63946', '#F4A261', '#E9C46A', '#2A9D8F',\r\n        '#264653', '#2B2D42', '#8D99AE', '#EDF2F4',\r\n        '#EF233C', '#D90429', '#06D6A0', '#118AB2'\r\n    ];\r\n    const segments = colors.length; // Ajustăm numărul de segmente la numărul de culori disponibile\r\n\r\n    useEffect(() => {\r\n        // Alege un segment aleatoriu la încărcarea componentei\r\n        const randomSegment = Math.floor(Math.random() * segments);\r\n        setSelectedSegment(randomSegment);\r\n    }, [segments]);\r\n\r\n    const getCoordinatesForPercent = (percent) => {\r\n        const x = Math.cos(2 * Math.PI * percent);\r\n        const y = Math.sin(2 * Math.PI * percent);\r\n        return [x, y];\r\n    };\r\n\r\n    const getPathData = (index, segments) => {\r\n        const startPercent = index / segments;\r\n        const endPercent = (index + 1) / segments;\r\n        const [startX, startY] = getCoordinatesForPercent(startPercent);\r\n        const [endX, endY] = getCoordinatesForPercent(endPercent);\r\n\r\n        return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold my-4\">Roata Monocromatică Variată</h1>\r\n            <svg viewBox=\"-18 -18 36 36\" width=\"300px\" height=\"300px\">\r\n                {colors.map((color, index) => (\r\n                    <path\r\n                        key={index}\r\n                        d={getPathData(index, segments)}\r\n                        fill={selectedSegment === index ? color : 'grey'}\r\n                        onClick={() => setSelectedSegment(index)}\r\n                        style={{ cursor: 'pointer', opacity: selectedSegment === index ? 1 : 0.3 }}\r\n                    />\r\n                ))}\r\n            </svg>\r\n            <p className=\"mt-4\">Selectați un segment pentru a evidenția culoarea, iar restul segmentelor vor deveni gri.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataMonocromaticaVariata;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}