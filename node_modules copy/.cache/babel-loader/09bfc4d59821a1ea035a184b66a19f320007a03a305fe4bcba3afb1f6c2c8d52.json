{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Teorie\\\\componente\\\\RoataMonocromatica.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoataMonocromaticaVariata() {\n  _s();\n  const [selectedSegment, setSelectedSegment] = useState(null);\n\n  // Culorile bazate pe roșu, galben, albastru, etc.\n  const colors = ['#FF0000', '#FFA500', '#FFFF00', '#808000', '#008000', '#008080', '#00FFFF', '#0000FF', '#800080', '#FF00FF', '#800000', '#000080'];\n\n  // Convertește hex la HSL\n  const hexToHSL = H => {\n    let r = 0,\n      g = 0,\n      b = 0;\n    if (H.length === 4) {\n      r = parseInt(H[1] + H[1], 16);\n      g = parseInt(H[2] + H[2], 16);\n      b = parseInt(H[3] + H[3], 16);\n    } else if (H.length === 7) {\n      r = parseInt(H[1] + H[2], 16);\n      g = parseInt(H[3] + H[4], 16);\n      b = parseInt(H[5] + H[6], 16);\n    }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n    if (delta === 0) h = 0;else if (cmax === r) h = (g - b) / delta % 6;else if (cmax === g) h = (b - r) / delta + 2;else h = (r - g) / delta + 4;\n    h = Math.round(h * 60);\n    if (h < 0) h += 360;\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n    return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n  };\n\n  // Calculează variantele de luminanță pentru fiecare culoare\n  const getColorVariants = color => {\n    let hsl = hexToHSL(color);\n    let [h, s, l] = hsl.slice(4, -1).split(',').map(Number);\n    return [`hsl(${h},${s}%,${l - 10}%)`,\n    // mai întunecat\n    `hsl(${h},${s}%,${l}%)`,\n    // normal\n    `hsl(${h},${s}%,${l + 10}%)` // mai deschis\n    ];\n  };\n\n  // Coordonate pentru fiecare segment bazate pe index\n  const calculatePath = (index, part) => {\n    const startAngle = (index * 30 + part * 10) * (Math.PI / 180);\n    const endAngle = (index * 30 + (part + 1) * 10) * (Math.PI / 180);\n    const largeArc = (endAngle - startAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;\n    const startX = 18 + 16 * Math.cos(startAngle);\n    const startY = 18 + 16 * Math.sin(startAngle);\n    const endX = 18 + 16 * Math.cos(endAngle);\n    const endY = 18 + 16 * Math.sin(endAngle);\n    return `M18 18 L ${startX} ${startY} A 16 16 0 ${largeArc} 1 ${endX} ${endY} Z`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 py-6 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Roata Monocromatic\\u0103 Variat\\u0103\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 36 36\",\n      className: \"w-64 h-64 mx-auto\",\n      children: colors.map((color, index) => {\n        const variants = getColorVariants(color);\n        return variants.map((variant, part) => /*#__PURE__*/_jsxDEV(\"path\", {\n          d: calculatePath(index, part),\n          fill: selectedSegment === index ? variant : '#D3D3D3',\n          stroke: \"white\",\n          strokeWidth: \"0.5\",\n          onClick: () => setSelectedSegment(index)\n        }, `${index}-${part}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this));\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Selecta\\u021Bi un segment pentru a vizualiza variantele de culoare, iar restul segmentelor vor deveni gri.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(RoataMonocromaticaVariata, \"OPQIMN4cnigIIHZL06aYaW9XC7A=\");\n_c = RoataMonocromaticaVariata;\nexport default RoataMonocromaticaVariata;\nvar _c;\n$RefreshReg$(_c, \"RoataMonocromaticaVariata\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RoataMonocromaticaVariata","_s","selectedSegment","setSelectedSegment","colors","hexToHSL","H","r","g","b","length","parseInt","cmin","Math","min","cmax","max","delta","h","s","l","round","abs","toFixed","getColorVariants","color","hsl","slice","split","map","Number","calculatePath","index","part","startAngle","PI","endAngle","largeArc","startX","cos","startY","sin","endX","endY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","variants","variant","d","fill","stroke","strokeWidth","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataMonocromatica.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction RoataMonocromaticaVariata() {\r\n    const [selectedSegment, setSelectedSegment] = useState(null);\r\n\r\n    // Culorile bazate pe roșu, galben, albastru, etc.\r\n    const colors = [\r\n        '#FF0000', '#FFA500', '#FFFF00', '#808000',\r\n        '#008000', '#008080', '#00FFFF', '#0000FF',\r\n        '#800080', '#FF00FF', '#800000', '#000080'\r\n    ];\r\n\r\n    // Convertește hex la HSL\r\n    const hexToHSL = (H) => {\r\n        let r = 0, g = 0, b = 0;\r\n        if (H.length === 4) {\r\n            r = parseInt(H[1] + H[1], 16);\r\n            g = parseInt(H[2] + H[2], 16);\r\n            b = parseInt(H[3] + H[3], 16);\r\n        } else if (H.length === 7) {\r\n            r = parseInt(H[1] + H[2], 16);\r\n            g = parseInt(H[3] + H[4], 16);\r\n            b = parseInt(H[5] + H[6], 16);\r\n        }\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r,g,b),\r\n            cmax = Math.max(r,g,b),\r\n            delta = cmax - cmin,\r\n            h = 0,\r\n            s = 0,\r\n            l = 0;\r\n        if (delta === 0)\r\n            h = 0;\r\n        else if (cmax === r)\r\n            h = ((g - b) / delta) % 6;\r\n        else if (cmax === g)\r\n            h = (b - r) / delta + 2;\r\n        else\r\n            h = (r - g) / delta + 4;\r\n\r\n        h = Math.round(h * 60);\r\n        if (h < 0)\r\n            h += 360;\r\n        l = (cmax + cmin) / 2;\r\n        s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n        s = +(s * 100).toFixed(1);\r\n        l = +(l * 100).toFixed(1);\r\n        return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r\n    };\r\n\r\n    // Calculează variantele de luminanță pentru fiecare culoare\r\n    const getColorVariants = (color) => {\r\n        let hsl = hexToHSL(color);\r\n        let [h, s, l] = hsl.slice(4, -1).split(',').map(Number);\r\n        return [\r\n            `hsl(${h},${s}%,${l - 10}%)`, // mai întunecat\r\n            `hsl(${h},${s}%,${l}%)`,      // normal\r\n            `hsl(${h},${s}%,${l + 10}%)`  // mai deschis\r\n        ];\r\n    };\r\n\r\n    // Coordonate pentru fiecare segment bazate pe index\r\n    const calculatePath = (index, part) => {\r\n        const startAngle = (index * 30 + part * 10) * (Math.PI / 180);\r\n        const endAngle = (index * 30 + (part + 1) * 10) * (Math.PI / 180);\r\n        const largeArc = (endAngle - startAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;\r\n        const startX = 18 + 16 * Math.cos(startAngle);\r\n        const startY = 18 + 16 * Math.sin(startAngle);\r\n        const endX = 18 + 16 * Math.cos(endAngle);\r\n        const endY = 18 + 16 * Math.sin(endAngle);\r\n\r\n        return `M18 18 L ${startX} ${startY} A 16 16 0 ${largeArc} 1 ${endX} ${endY} Z`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mx-auto px-4 py-6 text-center\">\r\n            <h1 className=\"text-2xl font-bold mb-4\">Roata Monocromatică Variată</h1>\r\n            <svg viewBox=\"0 0 36 36\" className=\"w-64 h-64 mx-auto\">\r\n                {colors.map((color, index) => {\r\n                    const variants = getColorVariants(color);\r\n                    return variants.map((variant, part) => (\r\n                        <path\r\n                            key={`${index}-${part}`}\r\n                            d={calculatePath(index, part)}\r\n                            fill={selectedSegment === index ? variant : '#D3D3D3'}\r\n                            stroke=\"white\"\r\n                            strokeWidth=\"0.5\"\r\n                            onClick={() => setSelectedSegment(index)}\r\n                        />\r\n                    ));\r\n                })}\r\n            </svg>\r\n            <p className=\"mt-4\">Selectați un segment pentru a vizualiza variantele de culoare, iar restul segmentelor vor deveni gri.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataMonocromaticaVariata;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}