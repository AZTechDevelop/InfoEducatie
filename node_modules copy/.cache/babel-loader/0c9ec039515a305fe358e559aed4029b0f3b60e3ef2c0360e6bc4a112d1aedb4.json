{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Teorie\\\\componente\\\\RoataAnaloaga.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoataCulorilorAnaloge() {\n  _s();\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const segments = 12; // Total de segmente\n\n  useEffect(() => {\n    // Selectează un segment aleatoriu din fiecare grup de trei la încărcarea componentei\n    setSelectedSegment(Math.floor(Math.random() * 4) * 3); // Asigură că este selectat primul segment dintr-unul din cele patru grupuri\n  }, []);\n  const colors = [\n  // Roșu și culori adiacente\n  'hsl(345, 80%, 50%)', 'hsl(30, 80%, 50%)', 'hsl(60, 80%, 50%)',\n  // Albastru și culori adiacente\n  'hsl(225, 80%, 50%)', 'hsl(240, 80%, 50%)', 'hsl(255, 80%, 50%)',\n  // Verde și culori adiacente\n  'hsl(105, 80%, 50%)', 'hsl(120, 80%, 50%)', 'hsl(135, 80%, 50%)',\n  // Mov și culori adiacente\n  'hsl(285, 80%, 50%)', 'hsl(300, 80%, 50%)', 'hsl(315, 80%, 50%)'];\n  const getCoordinatesForPercent = percent => {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x, y];\n  };\n  const getPathData = (index, segments) => {\n    const startPercent = index / segments;\n    const endPercent = (index + 1) / segments;\n    const [startX, startY] = getCoordinatesForPercent(startPercent);\n    const [endX, endY] = getCoordinatesForPercent(endPercent);\n    return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\n  };\n  const adjustColor = (color, index) => {\n    // Verifică dacă indexul actual este în același grup cu segmentul selectat\n    const groupStartIndex = Math.floor(selectedSegment / 3) * 3;\n    if (index >= groupStartIndex && index < groupStartIndex + 3) {\n      return color; // Segment activ\n    } else {\n      return 'grey'; // Segment inactiv\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold my-4\",\n      children: \"Roata Culorilor Analoage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"-18 -18 36 36\",\n      width: \"300px\",\n      height: \"300px\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: getPathData(index, segments),\n        fill: adjustColor(color, index),\n        onClick: () => setSelectedSegment(index),\n        style: {\n          cursor: 'pointer'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Selecta\\u021Bi un grup de nuan\\u021Be pentru a ilustra diferen\\u021Bele dintre ele.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(RoataCulorilorAnaloge, \"TP0ZmG4VdFS0Tplfvh2/vw9KbQU=\");\n_c = RoataCulorilorAnaloge;\nexport default RoataCulorilorAnaloge;\nvar _c;\n$RefreshReg$(_c, \"RoataCulorilorAnaloge\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RoataCulorilorAnaloge","_s","selectedSegment","setSelectedSegment","segments","Math","floor","random","colors","getCoordinatesForPercent","percent","x","cos","PI","y","sin","getPathData","index","startPercent","endPercent","startX","startY","endX","endY","adjustColor","color","groupStartIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","width","height","map","d","fill","onClick","style","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataAnaloaga.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction RoataCulorilorAnaloge() {\r\n    const [selectedSegment, setSelectedSegment] = useState(null);\r\n    const segments = 12; // Total de segmente\r\n\r\n    useEffect(() => {\r\n        // Selectează un segment aleatoriu din fiecare grup de trei la încărcarea componentei\r\n        setSelectedSegment(Math.floor(Math.random() * 4) * 3); // Asigură că este selectat primul segment dintr-unul din cele patru grupuri\r\n    }, []);\r\n\r\n    const colors = [\r\n       \r\n        // Roșu și culori adiacente\r\n        'hsl(345, 80%, 50%)', 'hsl(30, 80%, 50%)', 'hsl(60, 80%, 50%)',\r\n         // Albastru și culori adiacente\r\n         'hsl(225, 80%, 50%)', 'hsl(240, 80%, 50%)', 'hsl(255, 80%, 50%)',\r\n         \r\n        \r\n        // Verde și culori adiacente\r\n        'hsl(105, 80%, 50%)', 'hsl(120, 80%, 50%)', 'hsl(135, 80%, 50%)',\r\n        // Mov și culori adiacente\r\n        'hsl(285, 80%, 50%)', 'hsl(300, 80%, 50%)', 'hsl(315, 80%, 50%)'\r\n       \r\n        \r\n    ];\r\n    \r\n\r\n    const getCoordinatesForPercent = (percent) => {\r\n        const x = Math.cos(2 * Math.PI * percent);\r\n        const y = Math.sin(2 * Math.PI * percent);\r\n        return [x, y];\r\n    };\r\n\r\n    const getPathData = (index, segments) => {\r\n        const startPercent = index / segments;\r\n        const endPercent = (index + 1) / segments;\r\n        const [startX, startY] = getCoordinatesForPercent(startPercent);\r\n        const [endX, endY] = getCoordinatesForPercent(endPercent);\r\n\r\n        return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\r\n    };\r\n\r\n    const adjustColor = (color, index) => {\r\n        // Verifică dacă indexul actual este în același grup cu segmentul selectat\r\n        const groupStartIndex = Math.floor(selectedSegment / 3) * 3;\r\n        if (index >= groupStartIndex && index < groupStartIndex + 3) {\r\n            return color; // Segment activ\r\n        } else {\r\n            return 'grey'; // Segment inactiv\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold my-4\">Roata Culorilor Analoage</h1>\r\n            <svg viewBox=\"-18 -18 36 36\" width=\"300px\" height=\"300px\">\r\n                {colors.map((color, index) => (\r\n                    <path\r\n                        key={index}\r\n                        d={getPathData(index, segments)}\r\n                        fill={adjustColor(color, index)}\r\n                        onClick={() => setSelectedSegment(index)}\r\n                        style={{ cursor: 'pointer' }}\r\n                    />\r\n                ))}\r\n            </svg>\r\n            <p className=\"mt-4\">Selectați un grup de nuanțe pentru a ilustra diferențele dintre ele.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataCulorilorAnaloge;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}