{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Teorie\\\\componente\\\\RoataAnaloaga.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoataCulorilorAnaloge() {\n  const segments = 12; // Numărul total de segmente (4 seturi de 3 culori)\n  const colors = [\n  // Albastru la Verde\n  'hsl(240, 80%, 50%)',\n  // Albastru profund\n  'hsl(210, 80%, 50%)',\n  // Albastru-verde (cyan)\n  'hsl(180, 80%, 50%)',\n  // Verde vibrant\n\n  // Verde la Galben\n  'hsl(150, 80%, 50%)',\n  // Verde deschis\n  'hsl(120, 80%, 50%)',\n  // Verde tipic\n  'hsl(90, 80%, 50%)',\n  // Galben-verde\n\n  // Galben la Portocaliu\n  'hsl(75, 80%, 50%)',\n  // Galben pal\n  'hsl(45, 80%, 50%)',\n  // Galben-portocaliu\n  'hsl(30, 80%, 50%)',\n  // Portocaliu intens\n\n  // Roșu la Violet\n  'hsl(0, 80%, 50%)',\n  // Roșu aprins\n  'hsl(330, 80%, 50%)',\n  // Roșu-violet\n  'hsl(300, 80%, 50%)' // Violet luminos\n  ];\n  const getCoordinatesForPercent = percent => {\n    const x = Math.cos(2 * Math.PI * percent);\n    const y = Math.sin(2 * Math.PI * percent);\n    return [x, y];\n  };\n  const getPathData = (index, segments) => {\n    const startPercent = index / segments;\n    const endPercent = (index + 1) / segments;\n    const [startX, startY] = getCoordinatesForPercent(startPercent);\n    const [endX, endY] = getCoordinatesForPercent(endPercent);\n    return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold my-4\",\n      children: \"Roata Culorilor Analoage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"-18 -18 36 36\",\n      width: \"300px\",\n      height: \"300px\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: getPathData(index, segments),\n        fill: color,\n        style: {\n          cursor: 'pointer'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Fiecare segment reprezint\\u0103 o culoare din seturile analoge.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_c = RoataCulorilorAnaloge;\nexport default RoataCulorilorAnaloge;\nvar _c;\n$RefreshReg$(_c, \"RoataCulorilorAnaloge\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RoataCulorilorAnaloge","segments","colors","getCoordinatesForPercent","percent","x","Math","cos","PI","y","sin","getPathData","index","startPercent","endPercent","startX","startY","endX","endY","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","width","height","map","color","d","fill","style","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Teorie/componente/RoataAnaloaga.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nfunction RoataCulorilorAnaloge() {\r\n\r\n    const segments = 12; // Numărul total de segmente (4 seturi de 3 culori)\r\n    const colors = [\r\n    // Albastru la Verde\r\n    'hsl(240, 80%, 50%)',  // Albastru profund\r\n    'hsl(210, 80%, 50%)',  // Albastru-verde (cyan)\r\n    'hsl(180, 80%, 50%)',  // Verde vibrant\r\n\r\n    // Verde la Galben\r\n    'hsl(150, 80%, 50%)',  // Verde deschis\r\n    'hsl(120, 80%, 50%)',  // Verde tipic\r\n    'hsl(90, 80%, 50%)',   // Galben-verde\r\n\r\n    // Galben la Portocaliu\r\n    'hsl(75, 80%, 50%)',   // Galben pal\r\n    'hsl(45, 80%, 50%)',   // Galben-portocaliu\r\n    'hsl(30, 80%, 50%)',   // Portocaliu intens\r\n\r\n    // Roșu la Violet\r\n    'hsl(0, 80%, 50%)',    // Roșu aprins\r\n    'hsl(330, 80%, 50%)',  // Roșu-violet\r\n    'hsl(300, 80%, 50%)'   // Violet luminos\r\n];\r\n\r\n    const getCoordinatesForPercent = (percent) => {\r\n        const x = Math.cos(2 * Math.PI * percent);\r\n        const y = Math.sin(2 * Math.PI * percent);\r\n        return [x, y];\r\n    };\r\n\r\n    const getPathData = (index, segments) => {\r\n        const startPercent = index / segments;\r\n        const endPercent = (index + 1) / segments;\r\n        const [startX, startY] = getCoordinatesForPercent(startPercent);\r\n        const [endX, endY] = getCoordinatesForPercent(endPercent);\r\n\r\n        return `M 0 0 L ${startX * 16} ${startY * 16} A 16 16 0 0 1 ${endX * 16} ${endY * 16} z`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold my-4\">Roata Culorilor Analoage</h1>\r\n            <svg viewBox=\"-18 -18 36 36\" width=\"300px\" height=\"300px\">\r\n                {colors.map((color, index) => (\r\n                    <path\r\n                        key={index}\r\n                        d={getPathData(index, segments)}\r\n                        fill={color}\r\n                        style={{ cursor: 'pointer' }}\r\n                    />\r\n                ))}\r\n            </svg>\r\n            <p className=\"mt-4\">Fiecare segment reprezintă o culoare din seturile analoge.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoataCulorilorAnaloge;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,qBAAqBA,CAAA,EAAG;EAE7B,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAMC,MAAM,GAAG;EACf;EACA,oBAAoB;EAAG;EACvB,oBAAoB;EAAG;EACvB,oBAAoB;EAAG;;EAEvB;EACA,oBAAoB;EAAG;EACvB,oBAAoB;EAAG;EACvB,mBAAmB;EAAI;;EAEvB;EACA,mBAAmB;EAAI;EACvB,mBAAmB;EAAI;EACvB,mBAAmB;EAAI;;EAEvB;EACA,kBAAkB;EAAK;EACvB,oBAAoB;EAAG;EACvB,oBAAoB,CAAG;EAAA,CAC1B;EAEG,MAAMC,wBAAwB,GAAIC,OAAO,IAAK;IAC1C,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAGJ,OAAO,CAAC;IACzC,MAAMK,CAAC,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACE,EAAE,GAAGJ,OAAO,CAAC;IACzC,OAAO,CAACC,CAAC,EAAEI,CAAC,CAAC;EACjB,CAAC;EAED,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEX,QAAQ,KAAK;IACrC,MAAMY,YAAY,GAAGD,KAAK,GAAGX,QAAQ;IACrC,MAAMa,UAAU,GAAG,CAACF,KAAK,GAAG,CAAC,IAAIX,QAAQ;IACzC,MAAM,CAACc,MAAM,EAAEC,MAAM,CAAC,GAAGb,wBAAwB,CAACU,YAAY,CAAC;IAC/D,MAAM,CAACI,IAAI,EAAEC,IAAI,CAAC,GAAGf,wBAAwB,CAACW,UAAU,CAAC;IAEzD,OAAQ,WAAUC,MAAM,GAAG,EAAG,IAAGC,MAAM,GAAG,EAAG,kBAAiBC,IAAI,GAAG,EAAG,IAAGC,IAAI,GAAG,EAAG,IAAG;EAC5F,CAAC;EAED,oBACInB,OAAA;IAAKoB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBrB,OAAA;MAAIoB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrEzB,OAAA;MAAK0B,OAAO,EAAC,eAAe;MAACC,KAAK,EAAC,OAAO;MAACC,MAAM,EAAC,OAAO;MAAAP,QAAA,EACpDlB,MAAM,CAAC0B,GAAG,CAAC,CAACC,KAAK,EAAEjB,KAAK,kBACrBb,OAAA;QAEI+B,CAAC,EAAEnB,WAAW,CAACC,KAAK,EAAEX,QAAQ,CAAE;QAChC8B,IAAI,EAAEF,KAAM;QACZG,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAU;MAAE,GAHxBrB,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNzB,OAAA;MAAGoB,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAC;IAA0D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEd;AAACU,EAAA,GAxDQlC,qBAAqB;AA0D9B,eAAeA,qBAAqB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}