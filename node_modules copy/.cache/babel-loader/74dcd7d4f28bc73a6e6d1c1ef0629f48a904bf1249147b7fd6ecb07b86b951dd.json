{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andreea\\\\infoeducatie\\\\src\\\\Laborator\\\\laborator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { SketchPicker } from 'react-color';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreatorPaleta() {\n  _s();\n  const [palete, setPalete] = useState([]);\n  const [culori, setCulori] = useState([]);\n  const [culoareSelectata, setCuloareSelectata] = useState('#ffffff');\n  const [numePaleta, setNumePaleta] = useState('');\n  const [editarePaletaId, setEditarePaletaId] = useState(null);\n  useEffect(() => {\n    const paleteSalvate = JSON.parse(localStorage.getItem('paleteCulori'));\n    if (paleteSalvate) {\n      setPalete(paleteSalvate);\n    }\n  }, []);\n  const schimbaCuloare = color => {\n    setCuloareSelectata(color.hex);\n  };\n  const adaugaCuloare = () => {\n    if (!culori.includes(culoareSelectata)) {\n      setCulori([...culori, culoareSelectata]);\n    }\n  };\n  const salveazaPaleta = () => {\n    let paleteActualizate = palete;\n    if (editarePaletaId != null) {\n      paleteActualizate = palete.map(paleta => paleta.id === editarePaletaId ? {\n        ...paleta,\n        nume: numePaleta,\n        culori: culori\n      } : paleta);\n    } else {\n      const nouaPaleta = {\n        id: Date.now(),\n        nume: numePaleta,\n        culori: culori\n      };\n      paleteActualizate = [...palete, nouaPaleta];\n    }\n    setPalete(paleteActualizate);\n    localStorage.setItem('paleteCulori', JSON.stringify(paleteActualizate));\n    resetarePaleta();\n  };\n  const incarcaPaleta = paleta => {\n    setCulori(paleta.culori);\n    setNumePaleta(paleta.nume);\n    setEditarePaletaId(paleta.id);\n  };\n  const resetarePaleta = () => {\n    setCulori([]);\n    setNumePaleta('');\n    setEditarePaletaId(null);\n  };\n  const stergePaleta = id => {\n    const paleteActualizate = palete.filter(paleta => paleta.id !== id);\n    setPalete(paleteActualizate);\n    localStorage.setItem('paleteCulori', JSON.stringify(paleteActualizate));\n    resetarePaleta();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen bg-gray-100 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/2 flex flex-col items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"mb-2 p-1 border rounded\",\n        placeholder: \"Nume Paleta\",\n        value: numePaleta,\n        onChange: e => setNumePaleta(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SketchPicker, {\n        color: culoareSelectata,\n        onChangeComplete: schimbaCuloare\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 bg-blue-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n        onClick: adaugaCuloare,\n        children: \"Adaug\\u0103 Culoare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-2 bg-green-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n        onClick: salveazaPaleta,\n        children: \"Salveaz\\u0103 Paleta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/2 flex flex-col items-center justify-start overflow-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold py-2\",\n        children: \"Palete Salvate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), palete.map((paleta, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between bg-purple-300 text-white py-1 px-3 rounded w-full mb-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => incarcaPaleta(paleta),\n          className: \"cursor-pointer\",\n          children: paleta.nume\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => stergePaleta(paleta.id),\n          className: \"ml-4 bg-red-500 px-2 py-1 rounded\",\n          children: \"\\u0218terge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(CreatorPaleta, \"sJtmWicPr3LQKc2Cb4pab6fPHOM=\");\n_c = CreatorPaleta;\nexport default CreatorPaleta;\nvar _c;\n$RefreshReg$(_c, \"CreatorPaleta\");","map":{"version":3,"names":["React","useState","useEffect","SketchPicker","jsxDEV","_jsxDEV","CreatorPaleta","_s","palete","setPalete","culori","setCulori","culoareSelectata","setCuloareSelectata","numePaleta","setNumePaleta","editarePaletaId","setEditarePaletaId","paleteSalvate","JSON","parse","localStorage","getItem","schimbaCuloare","color","hex","adaugaCuloare","includes","salveazaPaleta","paleteActualizate","map","paleta","id","nume","nouaPaleta","Date","now","setItem","stringify","resetarePaleta","incarcaPaleta","stergePaleta","filter","className","children","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onChangeComplete","onClick","index","_c","$RefreshReg$"],"sources":["C:/Users/Andreea/infoeducatie/src/Laborator/laborator.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nfunction CreatorPaleta() {\r\n    const [palete, setPalete] = useState([]);\r\n    const [culori, setCulori] = useState([]);\r\n    const [culoareSelectata, setCuloareSelectata] = useState('#ffffff');\r\n    const [numePaleta, setNumePaleta] = useState('');\r\n    const [editarePaletaId, setEditarePaletaId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const paleteSalvate = JSON.parse(localStorage.getItem('paleteCulori'));\r\n        if (paleteSalvate) {\r\n            setPalete(paleteSalvate);\r\n        }\r\n    }, []);\r\n\r\n    const schimbaCuloare = (color) => {\r\n        setCuloareSelectata(color.hex);\r\n    };\r\n\r\n    const adaugaCuloare = () => {\r\n        if (!culori.includes(culoareSelectata)) {\r\n            setCulori([...culori, culoareSelectata]);\r\n        }\r\n    };\r\n\r\n    const salveazaPaleta = () => {\r\n        let paleteActualizate = palete;\r\n        if (editarePaletaId != null) {\r\n            paleteActualizate = palete.map(paleta => \r\n                paleta.id === editarePaletaId ? { ...paleta, nume: numePaleta, culori: culori } : paleta\r\n            );\r\n        } else {\r\n            const nouaPaleta = { id: Date.now(), nume: numePaleta, culori: culori };\r\n            paleteActualizate = [...palete, nouaPaleta];\r\n        }\r\n        setPalete(paleteActualizate);\r\n        localStorage.setItem('paleteCulori', JSON.stringify(paleteActualizate));\r\n        resetarePaleta();\r\n    };\r\n\r\n    const incarcaPaleta = (paleta) => {\r\n        setCulori(paleta.culori);\r\n        setNumePaleta(paleta.nume);\r\n        setEditarePaletaId(paleta.id);\r\n    };\r\n\r\n    const resetarePaleta = () => {\r\n        setCulori([]);\r\n        setNumePaleta('');\r\n        setEditarePaletaId(null);\r\n    };\r\n\r\n    const stergePaleta = (id) => {\r\n        const paleteActualizate = palete.filter(paleta => paleta.id !== id);\r\n        setPalete(paleteActualizate);\r\n        localStorage.setItem('paleteCulori', JSON.stringify(paleteActualizate));\r\n        resetarePaleta();\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex h-screen bg-gray-100 p-4\">\r\n            <div className=\"w-1/2 flex flex-col items-center justify-center\">\r\n                <input\r\n                    className=\"mb-2 p-1 border rounded\"\r\n                    placeholder=\"Nume Paleta\"\r\n                    value={numePaleta}\r\n                    onChange={e => setNumePaleta(e.target.value)}\r\n                />\r\n                <SketchPicker color={culoareSelectata} onChangeComplete={schimbaCuloare} />\r\n                <button className=\"mt-4 bg-blue-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" onClick={adaugaCuloare}>\r\n                    Adaugă Culoare\r\n                </button>\r\n                <button className=\"mt-2 bg-green-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" onClick={salveazaPaleta}>\r\n                    Salvează Paleta\r\n                </button>\r\n            </div>\r\n            <div className=\"w-1/2 flex flex-col items-center justify-start overflow-auto\">\r\n                <h2 className=\"text-lg font-bold py-2\">Palete Salvate</h2>\r\n                {palete.map((paleta, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between bg-purple-300 text-white py-1 px-3 rounded w-full mb-1\">\r\n                        <span onClick={() => incarcaPaleta(paleta)} className=\"cursor-pointer\">{paleta.nume}</span>\r\n                        <button onClick={() => stergePaleta(paleta.id)} className=\"ml-4 bg-red-500 px-2 py-1 rounded\">Șterge</button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatorPaleta;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}